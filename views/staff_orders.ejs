<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Staff Orders</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div>
        <%- include('nav') %>
    </div>
    <div class="container my-5 bg-light">
        <h1 class="text-center mb-4">New Orders</h1>
        <div id="orders">
            <p class="text-muted">Waiting for new orders...</p>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
    
        let statusOptions = [];
    
        async function fetchStatusOptions() {
            const response = await fetch('/status-options');
            statusOptions = await response.json();
        }
        fetchStatusOptions();
    
        socket.on('newOrderData', (orders) => {
            const ordersDiv = document.getElementById('orders');
            ordersDiv.innerHTML = "";
    
            orders.forEach(order => {
                ordersDiv.innerHTML += createOrderHtml(order);
            });
        });
    
        socket.on('orderStatusUpdate', (updatedOrder) => {
            const orderElement = document.getElementById(`order-${updatedOrder.order_id}`);
            if (orderElement) {
                orderElement.outerHTML = createOrderHtml(updatedOrder);
            }
        });
    
        function createOrderHtml(order) {
            return `
                <div class="card my-3" id="order-${order.order_id}">
                    <div class="card-header bg-primary text-white">
                        Order ID: ${order.order_id}
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">Total Before Discount: $${order.total_price.toFixed(2)}</h5>
                        ${order.promotion ? `<p><strong>Promotion:</strong> ${order.promotion} - Discount: $${order.discountAmount.toFixed(2)}</p>` : ''}
                        <p><strong>Final Total:</strong> $${(order.total_price - order.discountAmount).toFixed(2)}</p>
                        <p><strong>Status:</strong> ${order.status}</p>
                        <ul class="list-group">
                            ${order.items.map(item => `
                                <li class="list-group-item">
                                    <strong>${item.pro_name}</strong> x ${item.quantity} - $${(item.price * item.quantity).toFixed(2)}
                                    <br><small>Details: ${item.detail || 'No details provided'}</small>
                                </li>
                            `).join('')}
                        </ul>
                        <div class="mt-3">
                            ${statusOptions.map(status => `
                                <button class="btn ${status.buttonClass}" onclick="updateOrderStatus(${order.order_id}, ${status.id})">${status.name}</button>
                            `).join('')}
                        </div>
                    </div>
                </div>
            `;
        }
    
        function updateOrderStatus(orderId, statusId) {
            socket.emit('updateStatus', { orderId, statusId });
        }
    </script>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
